{"version":3,"file":"component---src-pages-index-tsx-c0e64a403e9c46252de4.js","mappings":"6HAEA,IAyBIA,EAAY,SAAmBC,EAAOC,GACxC,GAAuB,iBAAVD,IAAsBE,MAAMC,QAAQH,GAC/C,MAAM,IAAII,UAAU,gDAEtBH,EAAUI,OAAOC,OAAO,CACtBC,YAAY,GACXN,GACH,IAAuCO,EAYvC,OARER,EADEE,MAAMC,QAAQH,GACRA,EAAMS,KAAI,SAAUD,GAC1B,OAAOA,EAAEE,MACX,IAAGC,QAAO,SAAUH,GAClB,OAAOA,EAAEI,MACX,IAAGC,KAAK,KAEAb,EAAMU,OAEK,IAAjBV,EAAMY,OACD,GAEY,IAAjBZ,EAAMY,OACDX,EAAQM,WAAaP,EAAMc,cAAgBd,EAAMe,eAEvCf,IAAUA,EAAMe,gBAEjCf,EApDoB,SAA2BgB,GAIjD,IAHA,IAAIC,GAAkB,EAClBC,GAAkB,EAClBC,GAAsB,EACjBC,EAAI,EAAGA,EAAIJ,EAAOJ,OAAQQ,IAAK,CACtC,IAAIC,EAAYL,EAAOI,GACnBH,GAAmB,WAAWK,KAAKD,IAAcA,EAAUP,gBAAkBO,GAC/EL,EAASA,EAAOO,MAAM,EAAGH,GAAK,IAAMJ,EAAOO,MAAMH,GACjDH,GAAkB,EAClBE,EAAsBD,EACtBA,GAAkB,EAClBE,KACSF,GAAmBC,GAAuB,WAAWG,KAAKD,IAAcA,EAAUN,gBAAkBM,GAC7GL,EAASA,EAAOO,MAAM,EAAGH,EAAI,GAAK,IAAMJ,EAAOO,MAAMH,EAAI,GACzDD,EAAsBD,EACtBA,GAAkB,EAClBD,GAAkB,IAElBA,EAAkBI,EAAUN,gBAAkBM,GAAaA,EAAUP,gBAAkBO,EACvFF,EAAsBD,EACtBA,EAAkBG,EAAUP,gBAAkBO,GAAaA,EAAUN,gBAAkBM,EAE3F,CACA,OAAOL,CACT,CA4BYQ,CAAkBxB,IAE5BA,EAAQA,EAAMyB,QAAQ,YAAa,IAAIV,cAAcU,QAAQ,mBAAmB,SAAUC,EAAGC,GAC3F,OAAOA,EAAGb,aACZ,IAAGW,QAAQ,cAAc,SAAUG,GACjC,OAAOA,EAAEd,aACX,IA1BuCN,EA2BpBR,EA1BVC,EAAQM,WAAaC,EAAEqB,OAAO,GAAGf,cAAgBN,EAAEe,MAAM,GAAKf,EA2BzE,EACAsB,EAAOC,QAAUhC,EAEjB+B,EAAOC,QAAP,QAAyBhC,C,goBC6iBAiC,IAAAA,EC/lBe,WD+lBfA,MC/lBe,mEAERC,SAAAA,EA2L5BC,SAAAA,EAgBFC,EACAC,EACAC,EACAC,EACAC,GA4BA,YA5BAA,IAAAA,IAAAA,EAAuB,CAAC,GAajBA,EAAAA,CAAAA,EAKFF,EAAAA,CACHC,QAAAA,EACAE,WAAYL,EACZ,kBAAkB,GAClBI,MAAM,EAANA,CAAAA,EACKA,EAAAA,CACHE,QAASL,EAAW,EAAI,iBAa5BM,EACAN,EACAO,EACAC,EACAZ,EACAa,EACAC,EACAC,GAEA,MAAoC,CAAC,EAEjCF,IACFG,EAAaH,gBAAkBA,EAAAA,UAE3BF,GACFK,EAAaJ,MAAQA,EACrBI,EAAahB,OAASA,EACtBgB,EAAaH,gBAAkBA,EAC/BG,EAAaC,SAAAA,aAAAA,gBACJN,GAAAA,cAMAA,KALTK,EAAaC,SAAAA,WACbD,EAAaE,IAAM,EACnBF,EAAaG,KAAO,EACpBH,EAAaI,OAAS,EACtBJ,EAAaK,MAAQ,IAUrBP,IACFE,EAAaF,UAAYA,GAGvBC,IACFC,EAAaD,eAAiBA,GAEhC,WACKL,EAAAA,CACH,eAAc,EACd,yBAAyB,GACzBH,MAAM,EAANA,CACEE,QAASL,EAAW,EAAI,EACxBkB,WAAW,wBACRN,KAeP,OAJIJ,CAAAA,CAgF8CW,IC5T7CC,ED4T6CD,EAAAA,CAAAA,YAAAA,EE9UE,SF8UFA,GE3UlDvB,IAFAW,EAAAA,EADmEA,OAEnEC,EAAAA,EAFmEA,MAGnEZ,EAAAA,EAHmEA,OAKnE,oBAAIW,EAAAA,EAAAA,cAAAA,MAAAA,CAAAA,eAAAA,EAEiBJ,MAAO,CAAEkB,WAAgBzB,EAASY,EAAS,2BAI5DD,EAAAA,EAAAA,cAAAA,MAAAA,CAEKJ,MAAO,CAAEmB,SAAUd,EAAOe,QAAQ,UACrCC,EAAAA,cAAAA,MAAAA,CACEC,IAAI,GACJC,KAAK,6BACO,OACZC,IAAAA,mDAAwD/B,EAAAA,YAAkBY,EAAAA,kEAC1EL,MAAO,CACLmB,SAAS,OACTC,QAAQ,QACRV,SAAS,aAATA,IAAAA,EAAAA,EAWV,SAAAe,GAAAA,IAAyBC,EAAAA,EAAFA,SAAeC,EAAAA,EAAAA,EAAAA,GACpC,uBACGC,EAAAA,SAAAA,KACCP,EAAAA,cAACQ,EAAAA,EAAAA,CAAAA,EAAUF,IACVD,EAEmC,+FDtEC,SAAAI,GAAAA,IAC3CN,EAIAvB,EAL0DuB,IAE1DO,EAGA9B,EAL0D8B,OAG1DhC,EAEAE,EAL0DF,QAAAA,EAK1DE,EAL0DqB,IAI1DA,OAAAA,IAAAA,EAAAA,GAAAA,EACArB,EAAAA,EAL0DA,WAMvD0B,EAAAA,EAAAA,EAAAA,GAEH,kCAEQA,EAAAA,CACJK,SAAS,QACTjC,QAASA,EACTyB,IAAKvB,EAAauB,OAAAA,EAAMS,WACbhC,OAAAA,EAAauB,EACxBO,OAAQ9B,EAAa8B,OAAAA,EAASE,cAChBhC,OAAAA,EAAa8B,EAC3BT,IAAKA,IAAAA,EAAAA,EAKoC,SAAAQ,GAAAA,IAC7CI,EAEaJ,EAHiDI,SAAAA,EAGjDJ,EAHiDd,QAE9DA,OAAAA,IAAAA,EAAU,OACGc,EAHiD7B,WAG9DA,OAAAA,IAAAA,GAAa,EACV0B,EAAAA,EAAAA,EAAAA,GAEH,EAAcA,EAAMQ,QAAAA,MAASD,OAAAA,EAAAA,EAAUC,OAAAA,EAErCd,EAAAA,cAACe,EAAAA,EAAAA,CAAAA,EAAUT,EAAWO,EAAAA,CAAUC,MAAOA,EAAOlC,WAAYA,KAG5D,OAAKe,EAAQ3C,OAAAA,EAAAA,cAAAA,UAAAA,KAMR2C,EAAQ9C,KAAI,gBAAGmE,EAAAA,EAAAA,MAAON,EAAAA,EAAAA,OAAQO,EAAAA,EAAAA,KAAAA,OAC7BjB,EAAAA,cAAAA,SAAAA,CACEkB,IAAQF,EAAAA,IAASC,EAAAA,IAAQP,EACzBO,KAAMA,EACND,MAAOA,EACPN,OAAQ9B,EAAa8B,OAAAA,EAASE,cAChBhC,OAAAA,EAAa8B,EAC3BI,MAAOA,GAAAA,IAGVlB,GAAAA,CAAAA,EAKPmB,EAAMI,UAAY,CAChBhB,IAAKiB,EAAAA,OAAAA,WACLnB,IAAKmB,EAAAA,OAAAA,WACLN,MAAOM,EAAAA,OACPV,OAAQU,EAAAA,OACRxC,WAAYwC,EAAAA,MAGdC,EAAQC,YAAAA,UACRD,EAAQF,UAAY,CAClBlB,IAAKmB,EAAAA,OAAAA,WACLxC,WAAYwC,EAAAA,KACZP,SAAUO,EAAAA,MAAgB,CACxBjB,IAAKiB,EAAAA,OAAAA,WACLV,OAAQU,EAAAA,OACRN,MAAOM,EAAAA,SAETzB,QAASyB,EAAAA,QACPA,EAAAA,UAAoB,CAClBA,EAAAA,MAAgB,CACdJ,MAAOI,EAAAA,OAAAA,WACPH,KAAMG,EAAAA,OACNN,MAAOM,EAAAA,OACPV,OAAQU,EAAAA,OAAAA,aAEVA,EAAAA,MAAgB,CACdJ,MAAOI,EAAAA,OACPH,KAAMG,EAAAA,OAAAA,WACNN,MAAOM,EAAAA,OACPV,OAAQU,EAAAA,OAAAA,iBAA2BG,IAAAA,EAAAA,CAAAA,YAAAA,EE5GzC,SAAAd,GAAAA,IAAuBI,EAAAA,EAAFA,SAAeP,EAAAA,EAAAA,EAAAA,GAClC,OAAIO,EAAAA,EAAAA,cAECQ,EAAAA,EAAAA,CAAAA,EACKf,EAAAA,CACJO,SAAU,CACRV,IAAKU,GAAAA,eAAAA,EAGPZ,IAAI,iCAIQK,GAAAA,EAItBkB,EAAYF,YAAAA,cACZE,EAAYL,UAAY,CACtBN,SAAUO,EAAAA,OACVzB,QAAQ,OAARA,EAAS0B,EAAQF,gBAAAA,EAARM,EAAmB9B,QAC5BM,IAAK,SAAUK,EAAOoB,EAAUC,GAC9B,OAAKrB,EAAMoB,GAAAA,IAAAA,MAAAA,iBAKSA,EAAAA,kBAA4BC,EAAAA,yBAAAA,IAAAA,GChCvCC,IAAAA,EAAoC,SAAmBtB,GAClE,uCAEIN,EAAAA,cAACqB,EAAAA,EAAAA,CAAAA,EAAYf,IACbN,EAAAA,cAAAA,WAAAA,KACEA,EAAAA,cAACqB,EAAAA,EAAAA,CAAAA,EAAYf,EAAAA,CAAO1B,YAAAA,MAAY,EAMxCgD,EAAUN,YAAAA,YACVM,EAAUT,UAAYE,EAAQF,UAAAA,ICY9B,IDZ8BA,EE2G2B,SACvDb,EACAoB,EACAC,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OACGE,EAAAA,IAAAA,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,GAAAA,OAEEvB,EAAML,KAAAA,KAAOK,EAAML,IAAAA,IAAAA,OAAAA,MAAAA,IAAAA,CAMAK,EAAOoB,EAAUC,GAAAA,OAAkBE,IAAAA,IAAAA,MAAAA,iCAJtBF,EAAAA,0JAAAA,EAAAA,EAOd,CACvBG,MAAOV,IAAAA,OAAAA,WACPnB,IAAK8B,GAAAA,EAAAA,CAAAA,KAAAA,QAAAA,QAAAA,kBAAAA,YAAAA,QAAAA,cAAAA,SAAAA,WAAAA,EAAAA,CAAAA,QAAAA,aAAAA,EDjHY,IAAIC,IAkCvB,EAAkD,SAAAC,GAAAA,IAAAA,EAShDC,EAT6EC,GAC7EA,OAAAA,IAAAA,EAAAA,MAAAA,EACAL,EAOAI,EAT6EJ,MAG7EnD,EAMAuD,EAT6EvD,MAI7EM,EAKAiD,EAT6EjD,gBAK7EmD,EAIAF,EAT6EE,UAMtEC,EAGPH,EAHAI,MACAC,EAEAL,EAT6EK,YAQ7EC,EACAN,EAT6EM,OAS7EN,EAAAA,EAT6EA,QAU1E5B,EAAAA,EAAAA,EAAAA,GAEKtB,EAA0B8C,EAA5B9C,MAASZ,EAAmB0D,EAA5B1D,OAAiBW,EAAW+C,EAA5B/C,OAA4B+C,EAAAA,SLOlC9C,EACAZ,EACAW,GAIA,MAAoC,CAAC,EAErC,yBAmBA,MAde0D,UAGX1D,GACFK,EAAaJ,MAAQA,EACrBI,EAAahB,OAASA,GAAAA,gBACbW,IAKTqD,EAAAA,yDAGK,CACLA,UAAAA,EACA,4BAA4B,GAC5BzD,MAAOS,EAAAA,CKrCyB0C,CAKd9C,EAAOZ,EAAQW,GAH1B2D,EACIC,EADXhE,MACWgE,EAAAA,EAAXP,UACGQ,EAAAA,EAAAA,EAAAA,GAAAA,GAEQC,EAAAA,EAAAA,UAAAA,GACIC,EAAAA,EAAAA,UAAQ,kBAAMC,KAAKC,UAAUlB,EAAMrD,OAAAA,GAAS,CAACqD,EAAMrD,SAGhE4D,IACFD,EAAYC,GAGd,eHxCAtD,EACAC,EACAZ,GAEA,SAWA,MAAM,cAVFW,IACFkE,EAAAA,+CACG7E,EAASY,EAAS,kCAInBD,IACFkE,EAAAA,0BAAkCjE,EAAAA,iIAAqIZ,EAAAA,YAAkBY,EAAAA,yIAAAA,CAAAA,CG4B3L,CAAuBD,EAAQC,EAAOZ,GA+HtC,OA7HA8E,EAAAA,EAAAA,YAAU,WACHC,IACHA,EAA6BC,QAAAA,IAAAA,CAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,OAAAA,KAAAA,EAAAA,KAAAA,EAAAA,OAAyBC,MACpD,gBAAGC,EAAAA,EAAAA,oBAAqBC,EAAAA,EAAAA,qBAAAA,OACtBC,EAAcF,EAEP,CACLA,oBAAAA,EACAC,qBAAAA,EAAAA,KAQR,IA4CA,IA5CA,EAAiBE,EAAKC,QAAQC,cAAc,2BAG5C,OAAIC,GAAYC,KACVD,EAASE,UAAAA,MAEXvB,GAAAA,EAAc,CACZwB,WAAU,IAAC,MAEbvB,GAAAA,EAAS,CACPuB,WAAU,IAIZC,YAAW,WACTJ,EAASK,gBAAgB,wBAAhBA,GACR,WAEH1B,GAAAA,EAAc,CACZwB,WAAU,IAGZH,EAASM,iBAAiB,QAAQ,SAAS,IACzCN,EAASO,oBAAoB,OAAQC,GAAAA,MAErC5B,GAAAA,EAAS,CACPuB,WAAU,IAGZC,YAAW,WACTJ,EAASK,gBAAgB,wBAAhBA,GACR,YAIPI,EAAWC,IAAIC,IAKbf,GAAea,EAAWG,IAAID,QAAlC,GAMApB,EAA2BE,MACzB,YAAwBE,IAArBD,EAAAA,EAAAA,oBAAqBC,EAAAA,EAAAA,qBACjBE,EAAKC,UAIVD,EAAKC,QAAQe,UAAYnB,EAAAA,EAAAA,CACvB/E,WAAU,EACVC,SAAU6F,EAAWG,IAAID,GACzBzC,MAAAA,GACGxB,IAGA+D,EAAWG,IAAID,KAClBG,EAAiBC,uBAAsB,WACjClB,EAAKC,UACPkB,EAAkBrB,EAChBE,EAAKC,QACLa,EACAF,EACA1F,EACA4D,EACAC,EACAN,GAAAA,KAAAA,IASL,WACDwC,GACFG,qBAAqBH,GAEnBE,GACFA,GAAAA,EAAAA,GAGH,CAAC9C,KAGJgD,EAAAA,EAAAA,kBAAgB,WACVT,EAAWG,IAAID,IAAaf,IAC9BC,EAAKC,QAAQe,UAAYjB,EAAAA,EAAAA,CACvBjF,UAAW8F,EAAWG,IAAID,GAC1B/F,SAAU6F,EAAWG,IAAID,GACzBzC,MAAAA,GACGxB,IAAAA,MAILiC,GAAAA,EAAc,CACZwB,WAAU,IAAC,MAEbvB,GAAAA,EAAS,CACPuB,WAAU,IAAC,GAGd,CAACjC,KAAAA,EAAAA,EAAAA,eAGiBK,EAAAA,EAAAA,CAAAA,EAChBS,EAAAA,CACHjE,MAAM,EAANA,CAAAA,EACK+D,EACA/D,EAAAA,CACHM,gBAAAA,IAEFmD,UAAcO,GAASP,EAAAA,IAAgBA,EAAAA,IACvC2C,IAAKtB,EACLuB,wBAAyB,CACvBC,OAAQhC,GAEViC,0BAAyB,IAAC,KAIkCC,EAAAA,EAAAA,OAC9D,SAAqB7E,GACnB,OAAKA,EAAMwB,OASDsD,EAAAA,EAAAA,eAKWC,EAAqB/E,GAZ9B8E,IAAAA,IAgBhBE,EAAYnE,UAAYA,EACxBmE,EAAYhE,YAAAA,cAAAA,IEtOVgE,EFsOUhE,EAAAA,CAAAA,MAAAA,cAAAA,UAAAA,QAAAA,SAAAA,cAAAA,mBAAAA,cAAAA,UAAAA,UAAAA,mBAAAA,aAAAA,aAAAA,cAAAA,cAAAA,iBAAAA,cAAAA,wBAAAA,EExL6C,SACvDhB,EACAoB,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OACGG,EAAAA,IAAAA,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,GAAAA,MAAAA,cAGDvB,EAAMvB,QAAAA,UACL2C,GAAAA,WAAwBA,IACzBpB,EAAMoB,GAAAA,IAAAA,OAAAA,MAAAA,IAAAA,CAMgBpB,EAAOoB,GAAAA,OAAaG,IAAAA,IAAAA,MAAAA,IAHpCH,EAAAA,KAAapB,EAAMoB,GAAAA,+CAAAA,EAAAA,EAMR,IAAIM,IAAI,CAAC,QAAD,8BAEJ,CACvB7B,IAAKiB,IAAAA,OAAAA,WACLnB,IAAK8B,EACL/C,MAAOuG,EACPnH,OAAQmH,EACRzE,MAAOM,IAAAA,OACPrC,OAASuB,SAAAA,GACP,YAAIA,EAAMvB,SAGNyG,EAAahB,IAAIlE,EAAMvB,QAI3B,OAAO,IAAI0G,MAAM,iBACEnF,EAAMvB,OAAAA,qHAAAA,GAAAA,GAhF3BuG,ECLgBI,EDOT,SAAP,OACEvF,EAEAwF,EAH0BxF,IAEbyF,EACbD,EADAE,YACAF,EAAAA,EAH0BA,QAsBvBrF,EAAAA,EAAAA,EAAAA,GAMH,OAJIqF,GACFG,QAAQV,KAAKO,GAGXC,EAAAA,EAAAA,cACMN,EAAAA,EAAAA,CAAYxD,MAAO8D,GAAetF,KAE5CwF,QAAQV,KAAK,mBAAoBjF,GAEvBiF,KAAAA,GCtCdW,EAAYzE,YAAAA,cACZyE,EAAY5E,UAAYA,C,qBCjBxBhD,EAAAA,OAAqB,EAQrB,IAsBI6H,EAtBW,SAAkBC,EAAUC,QACnB,IAAlBA,IACFA,EAAgB,SAGlB,IAAIC,EAAUC,SAASzC,cAAcsC,GAErC,QAAIE,IACFA,EAAQE,eAAe,CACrBC,SAAU,SACVC,MAAOL,KAEF,EAQX,EAGA/H,EAAAA,EAAqB6H,C,8RChCRQ,EAAMC,EAAAA,QAAAA,IAAAA,WAAU,uDAAVA,CAAU,yKAUhBC,GAAcD,EAAAA,EAAAA,SAAOD,GAAI,0EAAXC,CAAW,6BAGzBE,GAAcF,EAAAA,EAAAA,SAAOD,GAAI,0EAAXC,CAAW,sEAKzBG,EAAQH,EAAAA,QAAAA,IAAAA,WAAU,yDAAVA,CAAU,iPAkBlBI,GAAgBJ,EAAAA,EAAAA,SAAOG,GAAM,4EAAbH,CAAa,wBAG7BK,GAAYL,EAAAA,EAAAA,SAAOG,GAAM,wEAAbH,CAAa,iBAGzBM,GAAaN,EAAAA,EAAAA,SAAOI,GAAc,yEAArBJ,CAAqB,0PAiBlCO,EAAaP,EAAAA,QAAAA,IAAAA,WAAU,8DAAVA,CAAU,qDAQvBQ,EAAaR,EAAAA,QAAAA,GAAAA,WAAS,8DAATA,CAAS,yGAOtBS,EAAcT,EAAAA,QAAAA,GAAAA,WAAS,+DAATA,CAAS,wG,yFC5EpC,EAAe,IAA0B,qDCKnCU,EAAeV,EAAAA,QAAAA,IAAAA,WAAU,+DAAVA,CAAU,uLAYzBW,EAAQX,EAAAA,QAAAA,IAAAA,WAAU,wDAAVA,CAAU,8EAMlBY,EAAYZ,EAAAA,QAAAA,GAAAA,WAAS,4DAATA,CAAS,wCAIrBa,EAAOb,EAAAA,QAAAA,GAAAA,WAAS,uDAATA,CAAS,gCAIhBc,EAAOd,EAAAA,QAAAA,EAAAA,WAAQ,uDAARA,CAAQ,mDAQfe,EAAsBf,EAAAA,QAAAA,IAAAA,WAAU,sEAAVA,CAAU,2EAMhCgB,EAAahB,EAAAA,QAAAA,OAAAA,WAAa,6DAAbA,CAAa,0OAiB1BiB,EAAQ,CACZ,CAAEC,IAAK,IAAKC,MAAO,UACnB,CAAED,IAAK,cAAeC,MAAO,cAG7B,CAAED,IAAK,WAAYC,MAAO,YAEtBC,EAAW,CACf,CAAEF,IAAK,iCAAkCC,MAAO,UAChD,CAAED,IAAK,8CAA+CC,MAAO,YAC7D,CAAED,IAAK,yBAA0BC,MAAO,SACxC,CAAED,IAAKG,EAAQF,MAAO,cACtB,CAAED,IAAK,mBAAoBC,MAAO,iBAGvBG,EAAS,WACpB,OACE/H,EAAAA,cAACmH,EAAY,KACXnH,EAAAA,cAACoH,EAAK,KACJpH,EAAAA,cAACqH,EAAS,gCACVrH,EAAAA,cAACsH,EAAI,KACFI,EAAM7K,KAAI,SAACmL,EAAMC,GAAK,OACrBjI,EAAAA,cAAAA,KAAAA,CAAIkB,IAAK+G,GACPjI,EAAAA,cAACuH,EAAI,CAACW,KAAMF,EAAKL,KAAMK,EAAKJ,OACzB,MAIX5H,EAAAA,cAACoH,EAAK,KACJpH,EAAAA,cAACqH,EAAS,gBACVrH,EAAAA,cAACsH,EAAI,KACFO,EAAShL,KAAI,SAACmL,EAAMC,GAAK,OACxBjI,EAAAA,cAAAA,KAAAA,CAAIkB,IAAK+G,GACPjI,EAAAA,cAACuH,EAAI,CAACW,KAAMF,EAAKL,KAAMK,EAAKJ,OACzB,MAIX5H,EAAAA,cAACwH,EAAmB,KAClBxH,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAACyH,EAAU,CAACU,QAAS,kBAAMC,EAAAA,EAAAA,GAAS,OAAO,GAAC,qBAOtD,EC1GMC,EAAQ5B,EAAAA,QAAAA,GAAAA,WAAS,wDAATA,CAAS,sDAKjB6B,GAAcC,EAAAA,EAAAA,mBAAiB,8GAY/BC,EAAM/B,EAAAA,QAAAA,IAAAA,WAAU,sDAAVA,CAAU,4hBAuChBgC,EAAUhC,EAAAA,QAAAA,IAAAA,WAAU,0DAAVA,CAAU,2FAOpBiC,EAAUjC,EAAAA,QAAAA,IAAAA,WAAU,0DAAVA,CAAU,iLAabkC,EAAS,WACpB,OACE3I,EAAAA,cAACwI,EAAG,KACFxI,EAAAA,cAACsI,EAAW,MACZtI,EAAAA,cAAAA,IAAAA,CAAGkI,KAAK,KACNlI,EAAAA,cAACqI,EAAK,iBAERrI,EAAAA,cAACyI,EAAO,KACNzI,EAAAA,cAAC0I,EAAO,KACN1I,EAAAA,cAAAA,IAAAA,CAAGkI,KAAK,KAAG,WAEblI,EAAAA,cAAC0I,EAAO,KACN1I,EAAAA,cAAAA,IAAAA,CAAGkI,KAAK,eAAa,eAEvBlI,EAAAA,cAAC0I,EAAO,KACN1I,EAAAA,cAAAA,IAAAA,CAAGkI,KAAK,SAAO,SAEjBlI,EAAAA,cAAC0I,EAAO,KACN1I,EAAAA,cAAAA,IAAAA,CAAGkI,KAAK,YAAU,aAK5B,ECjGMU,EAAYnC,EAAAA,QAAAA,KAAAA,WAAW,2DAAXA,CAAW,gHAShBoC,EAAO,SAAH,GAAsB,IAAhBxI,EAAQ,EAARA,SACrB,OACEL,EAAAA,cAAC4I,EAAS,KACR5I,EAAAA,cAAC2I,EAAM,MACNtI,EACDL,EAAAA,cAAC+H,EAAM,MAGb,C,sGCtBA,EAAe,IAA0B,kDCAzC,EAAe,IAA0B,uDCAzC,EAAe,IAA0B,4DCAzC,EAAe,IAA0B,uDCAzC,EAAe,IAA0B,yD,oBCoBnCe,EAAYrC,EAAAA,QAAAA,EAAAA,WAAQ,CAAAnF,YAAAA,mBAAAyH,YAAAA,eAARtC,CAAQ,oFASpBuC,EAAa,CACjBC,OAAQ,kBACRC,aAAc,OACdC,UAAW,yBAGPC,EAAS,CACb,CACEC,MAAO,oBACPC,SAAU,4BACVC,KAAM,0BACNC,YACE,iGACFxB,KAAM,uBACNyB,OAAQC,EACRC,OAAQ,2DAEV,CACEN,MAAO,2BACPC,SAAU,yBACVC,KAAM,0BACNC,YACE,0NACFxB,KAAM,uBACNyB,OAAQG,EACRD,OAAQ,qDAEV,CACEN,MAAO,qBACPC,SAAU,yBACVC,KAAM,0BACNC,YACE,gKACFxB,KAAM,qBACNyB,OAAQI,EACRF,OACE,6EAEJ,CACEN,MAAO,kCACPC,SAAU,yCACVC,KAAM,cACNC,YACE,uTACFxB,KAAM,kBACNyB,OAAQK,EACRH,OAAQ,2DAEV,CACEN,MAAO,qBACPC,SACE,oEACFC,KAAM,cACNC,YACE,6SACFxB,KAAM,kBACNyB,OAAQM,EACRJ,OAAQ,qDAkEZ,EA9DkB,WAChB,OACE3J,EAAAA,cAAC6I,EAAAA,EAAI,KACH7I,EAAAA,cAAAA,QAAAA,KAAAA,wBACAA,EAAAA,cAACwG,EAAAA,GAAG,KACFxG,EAAAA,cAAC4G,EAAAA,GAAK,KACJ5G,EAAAA,cAACiH,EAAAA,GAAU,iBACXjH,EAAAA,cAACgH,EAAAA,GAAU,qNAIGhH,EAAAA,cAAAA,OAAAA,CAAMqJ,MAAM,6BAA2B,QAAY,oHAKnErJ,EAAAA,cAAC6G,EAAAA,GAAa,KACZ7G,EAAAA,cAAC+F,EAAAA,EAAW,CACV3H,OAAQ,IACRY,MAAO,IACPC,gBAAgB,QAChBkB,IAAI,wBACJF,IAAI,0BACJtB,MAAOqK,EAAWnD,YAAAA,EAAAA,SAIvBuD,EAAOvM,KAAI,SAAC0J,EAAO0B,GAClB,IAAM+B,EAAY/B,EAAQ,EAAIzB,EAAAA,GAAMG,EAAAA,GACpC,OACE3G,EAAAA,cAACgK,EAAS,CAAC9I,IAAK+G,GACdjI,EAAAA,cAAC+G,EAAAA,GAAU,KACT/G,EAAAA,cAAC8I,EAAS,CAACZ,KAAM3B,EAAMyB,MACrBhI,EAAAA,cAAAA,MAAAA,CAAKG,IAAKoG,EAAMkD,OAAQxJ,IAAKsG,EAAMoD,WAGvC3J,EAAAA,cAAC4G,EAAAA,GAAK,KACJ5G,EAAAA,cAACiH,EAAAA,GAAU,KAAEV,EAAM8C,OACnBrJ,EAAAA,cAACkH,EAAAA,GAAW,KACTX,EAAM+C,SACPtJ,EAAAA,cAAAA,KAAAA,MACCuG,EAAMgD,MAETvJ,EAAAA,cAACgH,EAAAA,GAAU,KAAET,EAAMiD,cAI3B,IACAxJ,EAAAA,cAAAA,MAAAA,CAAKrB,MAAO,CAAEU,SAAU,WAAY4K,QAAS,MAC3CjK,EAAAA,cAAAA,OAAAA,KACEA,EAAAA,cAAAA,WAAAA,CAAUkK,GAAG,OAAOC,cAAc,qBAChCnK,EAAAA,cAAAA,OAAAA,CACEoC,UAAU,MACVgI,EAAE,qDAOhB,C","sources":["webpack://kyle-watson-portfolio/./node_modules/camelcase/index.js","webpack://kyle-watson-portfolio/../src/image-utils.ts","webpack://kyle-watson-portfolio/../src/components/hooks.ts","webpack://kyle-watson-portfolio/../src/components/picture.tsx","webpack://kyle-watson-portfolio/../src/components/layout-wrapper.tsx","webpack://kyle-watson-portfolio/../src/components/placeholder.tsx","webpack://kyle-watson-portfolio/../src/components/main-image.tsx","webpack://kyle-watson-portfolio/../src/components/gatsby-image.browser.tsx","webpack://kyle-watson-portfolio/../src/components/gatsby-image.server.tsx","webpack://kyle-watson-portfolio/../src/components/static-image.server.tsx","webpack://kyle-watson-portfolio/../src/components/static-image.tsx","webpack://kyle-watson-portfolio/./node_modules/gatsby-plugin-smoothscroll/index.js","webpack://kyle-watson-portfolio/./src/components/content.tsx","webpack://kyle-watson-portfolio/./src/images/Resume.pdf","webpack://kyle-watson-portfolio/./src/components/footer.tsx","webpack://kyle-watson-portfolio/./src/components/header.tsx","webpack://kyle-watson-portfolio/./src/components/main.tsx","webpack://kyle-watson-portfolio/./src/images/jet.png","webpack://kyle-watson-portfolio/./src/images/woodwing.png","webpack://kyle-watson-portfolio/./src/images/m2mobi_poster.jpg","webpack://kyle-watson-portfolio/./src/images/hvawork.jpeg","webpack://kyle-watson-portfolio/./src/images/hvapresent.jpg","webpack://kyle-watson-portfolio/./src/pages/index.tsx"],"sourcesContent":["'use strict';\n\nvar preserveCamelCase = function preserveCamelCase(string) {\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n  return string;\n};\nvar camelCase = function camelCase(input, options) {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n  var postProcess = function postProcess(x) {\n    return options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  };\n  if (Array.isArray(input)) {\n    input = input.map(function (x) {\n      return x.trim();\n    }).filter(function (x) {\n      return x.length;\n    }).join('-');\n  } else {\n    input = input.trim();\n  }\n  if (input.length === 0) {\n    return '';\n  }\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n  var hasUpperCase = input !== input.toLowerCase();\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (_, p1) {\n    return p1.toUpperCase();\n  }).replace(/\\d+(\\w|$)/g, function (m) {\n    return m.toUpperCase();\n  });\n  return postProcess(input);\n};\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\n/**\n * Smooth scrolling onClick event handler\n * @param {string} selector argument will be passed to `querySelector`, usually an HTML id\n * @param {string} [blockPosition='start'] argument will be used to determine position where will be scrolled to (start, center, end, nearest)\n * @returns {boolean} false if `document.querySelector` doesn't find a match, otherwise true\n */\nvar scrollTo = function scrollTo(selector, blockPosition) {\n  if (blockPosition === void 0) {\n    blockPosition = 'start';\n  }\n\n  var element = document.querySelector(selector);\n\n  if (element) {\n    element.scrollIntoView({\n      behavior: 'smooth',\n      block: blockPosition\n    });\n    return true;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    console.warn(\"gatsby-plugin-smoothscroll:\\n The selector: '%s' wasn't found in the document.\\n Make sure you pass in a valid CSS selector string.\", selector);\n  }\n\n  return false;\n};\n\nvar _default = scrollTo;\nexports[\"default\"] = _default;","import styled from \"styled-components\";\n\nexport const Row = styled.div`\n  display: flex;\n  padding: 3rem 8rem;\n  align-items: center;\n  box-shadow: inset #00000070 0px 8px 8px;\n  @media only screen and (max-width: 768px) {\n    display: block;\n    padding: 1rem 3rem;\n  }\n`;\nexport const CenteredRow = styled(Row)`\n  justify-content: center;\n`;\nexport const InvertedRow = styled(Row)`\n  background-color: #136f63;\n  color: white;\n  flex-direction: row-reverse;\n`;\nexport const Block = styled.div`\n  padding: 0 4rem;\n  width: 50%;\n  @media only screen and (max-width: 768px) {\n    width: 100%;\n    padding: 1rem 0;\n  }\n\n  table {\n    td {\n      border-bottom: solid black 1px;\n      border-top: solid black 1px;\n      border-left: dashed black 1px;\n      border-right: dashed black 1px;\n      padding: 0 1rem;\n    }\n  }\n`;\nexport const CenteredBlock = styled(Block)`\n  text-align: center;\n`;\nexport const FullBlock = styled(Block)`\n  width: 100%;\n`;\nexport const ImageBlock = styled(CenteredBlock)`\n  img {\n    box-shadow: #00000070 0px 8px 8px;\n    border: solid 8px white;\n    border-radius: 16px;\n    max-width: 100%;\n    max-height: 500px;\n    @media only screen and (max-width: 1024px) {\n      max-width: 300px;\n      max-height: 300px;\n    }\n    @media only screen and (max-width: 768px) {\n      max-width: 80%;\n    }\n  }\n`;\n\nexport const TextColumn = styled.div`\n  a:link {\n    color: #f3b3a6;\n  }\n  a:visited {\n    color: #f3b3a6;\n  }\n`;\nexport const BlockTitle = styled.h2`\n  font-size: 2.5rem;\n  font-family: sans-serif;\n  @media only screen and (max-width: 768px) {\n    font-size: 1.8rem;\n  }\n`;\nexport const ColumnTitle = styled.h3`\n  font-size: 1.8rem;\n  font-family: sans-serif;\n  @media only screen and (max-width: 768px) {\n    font-size: 1.5rem;\n  }\n`;\n","export default __webpack_public_path__ + \"static/Resume-00f5f6584862a975e67d618db3d871e2.pdf\";","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport scrollTo from \"gatsby-plugin-smoothscroll\";\nimport Resume from \"../images/Resume.pdf\";\n\nconst StyledFooter = styled.div`\n  display: flex;\n  padding: 1rem 8rem;\n  font-family: sans-serif;\n  color: white;\n  background-color: #001b2e;\n  font-size: 1.2rem;\n  @media only screen and (max-width: 768px) {\n    padding: 1rem;\n    display: block;\n  }\n`;\nconst Links = styled.div`\n  padding: 0 4rem;\n  @media only screen and (max-width: 768px) {\n    padding: 0 1rem;\n  }\n`;\nconst ListTitle = styled.h3`\n  font-size: 1.3rem;\n  font-weight: bold;\n`;\nconst List = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\nconst Link = styled.a`\n  &:link {\n    color: white;\n  }\n  &:visited {\n    color: #f3b3a6;\n  }\n`;\nconst BackButtonContainer = styled.div`\n  flex-grow: 1;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n`;\nconst BackButton = styled.button`\n  color: #001b2e;\n  font-weight: bold;\n  font-size: 1.2rem;\n  background-color: #f3b3a6;\n  padding: 1rem;\n  margin: 0;\n  border: none;\n  border-radius: 20px;\n  box-shadow: #000000 0px 8px 8px;\n  cursor: pointer;\n  transition: ease 0.3s;\n  :hover {\n    transform: translateY(-5px);\n  }\n`;\n\nconst links = [\n  { url: \"/\", label: \"Resume\" },\n  { url: \"/experience\", label: \"Experience\" },\n  // { url: \"/resume\", label: \"Projects\" },\n  // { url: \"/resume\", label: \"Events/Awards\" },\n  { url: \"/contact\", label: \"Contact\" },\n];\nconst contacts = [\n  { url: \"https://github.com/kylejwatson\", label: \"GitHub\" },\n  { url: \"https://www.linkedin.com/in/kylejwatsonbsc/\", label: \"LinkedIn\" },\n  { url: \"mailto:mail@watsonk.me\", label: \"Email\" },\n  { url: Resume, label: \"Resume PDF\" },\n  { url: \"tel:+31620747762\", label: \"Mobile Phone\" },\n];\n\nexport const Footer = () => {\n  return (\n    <StyledFooter>\n      <Links>\n        <ListTitle>Kyle Watson - Portfolio</ListTitle>\n        <List>\n          {links.map((link, index) => (\n            <li key={index}>\n              <Link href={link.url}>{link.label}</Link>\n            </li>\n          ))}\n        </List>\n      </Links>\n      <Links>\n        <ListTitle>Contact</ListTitle>\n        <List>\n          {contacts.map((link, index) => (\n            <li key={index}>\n              <Link href={link.url}>{link.label}</Link>\n            </li>\n          ))}\n        </List>\n      </Links>\n      <BackButtonContainer>\n        <div>\n          <BackButton onClick={() => scrollTo(\"body\")}>\n            Back to the top\n          </BackButton>\n        </div>\n      </BackButtonContainer>\n    </StyledFooter>\n  );\n};\n","import * as React from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\n\nconst Title = styled.h1`\n  font-size: 3rem;\n  font-family: Impact;\n  color: #f3b3a6;\n`;\nconst GlobalStyle = createGlobalStyle`\n  html {\n    @media only screen and (max-width: 1024px) {\n      font-size: 12px;\n    }\n  }\n  body {\n    margin: 0;\n    background-color: #CFE8EF;\n  }\n`;\n\nconst Nav = styled.div`\n  padding: 0 4rem;\n  text-transform: lowercase;\n  font-family: sans-serif;\n  display: flex;\n  @media only screen and (max-width: 768px) {\n    display: block;\n    padding: 1rem;\n  }\n  background-color: #001b2e;\n  justify-content: space-between;\n  a {\n    color: white;\n    text-decoration: none;\n    transition: all 0.2s ease-in-out;\n    position: relative;\n    &:before,\n    &:after {\n      content: \"\";\n      position: absolute;\n      bottom: -10px;\n      width: 0px;\n      height: 5px;\n      margin: 5px 0 0;\n      transition: all 0.2s ease-in-out;\n      transition-duration: 0.2s;\n      background-color: #f3b3a6;\n      left: 0;\n    }\n    &:hover {\n      cursor: pointer;\n      &:before,\n      &:after {\n        width: 100%;\n        opacity: 1;\n      }\n    }\n  }\n`;\nconst NavList = styled.div`\n  display: flex;\n  @media only screen and (max-width: 768px) {\n    justify-content: space-between;\n  }\n`;\n\nconst NavLink = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.5rem;\n  padding: 0 1rem;\n  @media only screen and (max-width: 768px) {\n    font-size: 1rem;\n    padding: 0;\n    font-weight: bold;\n  }\n`;\n\nexport const Header = () => {\n  return (\n    <Nav>\n      <GlobalStyle />\n      <a href=\"/\">\n        <Title>Kyle W.</Title>\n      </a>\n      <NavList>\n        <NavLink>\n          <a href=\"/\">Resume</a>\n        </NavLink>\n        <NavLink>\n          <a href=\"/experience\">Experience</a>\n        </NavLink>\n        <NavLink>\n          <a href=\"/blog\">Blog</a>\n        </NavLink>\n        <NavLink>\n          <a href=\"/contact\">Contact</a>\n        </NavLink>\n      </NavList>\n    </Nav>\n  );\n};\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { Footer } from \"./footer\";\nimport { Header } from \"./header\";\n\nconst MainStyle = styled.main`\n  font-family: serif;\n  color: #001b2e;\n  font-size: 1.2em;\n  @media only screen and (max-width: 768px) {\n    font-size: 1.5em;\n  }\n`;\n\nexport const Main = ({ children }) => {\n  return (\n    <MainStyle>\n      <Header />\n      {children}\n      <Footer />\n    </MainStyle>\n  );\n};\n","export default __webpack_public_path__ + \"static/jet-887bbc6d59551a050ee8a6bef3cd5f2b.png\";","export default __webpack_public_path__ + \"static/woodwing-576bf896197ce657ea212ba4313afdc9.png\";","export default __webpack_public_path__ + \"static/m2mobi_poster-9787929da3aa6f335120f48341162778.jpg\";","export default __webpack_public_path__ + \"static/hvawork-936fc26758ddad3ff10ffd55b6eaf935.jpeg\";","export default __webpack_public_path__ + \"static/hvapresent-6853231c57904e8200406b36823352d5.jpg\";","import * as React from \"react\";\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport styled from \"styled-components\";\nimport samsonImage from \"../images/jet.png\";\nimport woodwingImage from \"../images/woodwing.png\";\nimport m2mobiImage from \"../images/m2mobi_poster.jpg\";\nimport uosImage from \"../images/hvawork.jpeg\";\nimport hvaImage from \"../images/hvapresent.jpg\";\nimport { Main } from \"../components/main\";\nimport {\n  Block,\n  BlockTitle,\n  CenteredBlock,\n  ColumnTitle,\n  ImageBlock,\n  InvertedRow,\n  Row,\n  TextColumn,\n} from \"../components/content\";\n\nconst ImageLink = styled.a`\n  img {\n    background-color: white;\n    transition: ease 0.3s;\n    :hover {\n      transform: scale(1.2);\n    }\n  }\n`;\nconst ImageFrame = {\n  border: \"solid 8px white\",\n  borderRadius: \"16px\",\n  boxShadow: \"#00000070 0px 8px 8px\",\n};\n\nconst blocks = [\n  {\n    title: \"Lead 3D Developer\",\n    location: \"SamsonVT / Manchester, UK\",\n    date: \"18-05-2020 – 30-04-2021\",\n    description:\n      \"Full stack development working on a robust AWS techstack to implement a Virtual Twin platform.\",\n    link: \"#samsonvt-experience\",\n    imgUrl: samsonImage,\n    imgAlt: \"A screenshot of a jet engine on the SamsonCORE platform\",\n  },\n  {\n    title: \"Junior Software Engineer\",\n    location: \"WoodWing / Zaandam, NL\",\n    date: \"01-02-2019 – 01-06-2019\",\n    description:\n      \"This was my first fulltime experience in the industry, working on enterprise asset management software. It is where I learnt most of my core skills and technologies, including TDD, paired-programming and Typescript.\",\n    link: \"#woodwing-experience\",\n    imgUrl: woodwingImage,\n    imgAlt: \"A promo image for the Woodwing Elvis/DAM platform\",\n  },\n  {\n    title: \"Development Intern\",\n    location: \"M2Mobi / Amsterdam, NL\",\n    date: \"20-09-2018 – 20-01-2019\",\n    description:\n      \"We worked as a student team on an in-house native android app for reserving meeting rooms in the office. Integration with GSuite, Google Calendars, Firebase.\",\n    link: \"#m2mobi-experience\",\n    imgUrl: m2mobiImage,\n    imgAlt:\n      \"A poster created for the midterm presentation on the group work at M2Mobi\",\n  },\n  {\n    title: \"Software Engineering Bsc (Hons)\",\n    location: \"University of Salford / Manchester, UK\",\n    date: \"2016 – 2020\",\n    description:\n      \"I graduated with a first class bachelors of science degree in July and during my time at the University I had the opportunity to grow my skills, knowledge and interest in the world of computer science. I also had the opportunity to attended many tech events and competitions as a way to further my abilities.\",\n    link: \"#uos-experience\",\n    imgUrl: uosImage,\n    imgAlt: \"A photo of Kyle working on a team project in university\",\n  },\n  {\n    title: \"Mobile Development\",\n    location:\n      \"Amsterdam University of Applied Sciences/Hogeschool van Amsterdam\",\n    date: \"2018 – 2019\",\n    description:\n      \"While working on my final project, which earned me a 10/10 grade, I grew to love working with Java, Kotlin and the Android platform. This was also the year that I studied abroad, learning a lot about Dutch culture and gaining independence. This was also the time in which I did my placement abroad.\",\n    link: \"#hva-experience\",\n    imgUrl: hvaImage,\n    imgAlt: \"A photo of Kyle presenting his work to the class\",\n  },\n];\n\nconst IndexPage = () => {\n  return (\n    <Main>\n      <title>Kyle Watson - Resume</title>\n      <Row>\n        <Block>\n          <BlockTitle>About Me</BlockTitle>\n          <TextColumn>\n            I am a software engineer from the UK living in the Netherlands.\n            During my career I have worked with several technologies on a wide\n            range of projects for different companies and events. I am an\n            advocate of <abbr title=\"Free Open Source Software\">FOSS</abbr> and\n            online privacy; I enjoy working with 3D CGI, I dabble in game\n            development and electronic music production.\n          </TextColumn>\n        </Block>\n        <CenteredBlock>\n          <StaticImage\n            height={500}\n            width={300}\n            backgroundColor=\"white\"\n            src=\"../images/profile.png\"\n            alt=\"A profile photo of Kyle\"\n            style={ImageFrame}\n          />\n        </CenteredBlock>\n      </Row>\n      {blocks.map((block, index) => {\n        const StyledRow = index % 2 ? Row : InvertedRow;\n        return (\n          <StyledRow key={index}>\n            <ImageBlock>\n              <ImageLink href={block.link}>\n                <img src={block.imgUrl} alt={block.imgAlt} />\n              </ImageLink>\n            </ImageBlock>\n            <Block>\n              <BlockTitle>{block.title}</BlockTitle>\n              <ColumnTitle>\n                {block.location}\n                <br />\n                {block.date}\n              </ColumnTitle>\n              <TextColumn>{block.description}</TextColumn>\n            </Block>\n          </StyledRow>\n        );\n      })}\n      <svg style={{ position: \"absolute\", zIndex: -100 }}>\n        <defs>\n          <clipPath id=\"wave\" clipPathUnits=\"objectBoundingBox\">\n            <path\n              className=\"st0\"\n              d=\"M1,0c0,0-0.3,0.1-0.5,0.1S0.3,0,0,0.1V1h1L1,0z\"\n            />\n          </clipPath>\n        </defs>\n      </svg>\n    </Main>\n  );\n};\n\nexport default IndexPage;\n"],"names":["camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","map","trim","filter","length","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","height","prototype","format","isLoading","isLoaded","images","loading","style","shouldLoad","opacity","placeholder","layout","width","backgroundColor","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","sources","fallbackImage","paddingTop","maxWidth","display","React","alt","role","src","a","children","props","Fragment","Sizer","t","srcSet","decoding","undefined","fallback","sizes","Image","media","type","key","propTypes","PropTypes","Picture","displayName","isRequired","Placeholder","_Picture$propTypes","propName","componentName","MainImage","rest","image","altValidator","Set","e","onError","as","className","preactClass","class","onStartLoad","onLoad","overflow","wStyle","wClass","wrapperProps","useRef","useMemo","JSON","stringify","sizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","memo","warn","GatsbyImageHydrator","GatsbyImage","checkDimensionProps","validLayouts","Error","GatsbyImageBrowser","__error","imageData","__imageData","console","StaticImage","_default","selector","blockPosition","element","document","scrollIntoView","behavior","block","Row","styled","CenteredRow","InvertedRow","Block","CenteredBlock","FullBlock","ImageBlock","TextColumn","BlockTitle","ColumnTitle","StyledFooter","Links","ListTitle","List","Link","BackButtonContainer","BackButton","links","url","label","contacts","Resume","Footer","link","index","href","onClick","scrollTo","Title","GlobalStyle","createGlobalStyle","Nav","NavList","NavLink","Header","MainStyle","Main","ImageLink","componentId","ImageFrame","border","borderRadius","boxShadow","blocks","title","location","date","description","imgUrl","samsonImage","imgAlt","woodwingImage","m2mobiImage","uosImage","hvaImage","StyledRow","zIndex","id","clipPathUnits","d"],"sourceRoot":""}